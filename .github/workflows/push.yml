name: pushCI

env:
  GO_VERSION: 1.17
  MIN_SUPPORTED_GO_VERSION: 1.13

on:
  push:
    branches:
      - master
    tags:
      - 'v*'

jobs:

  old-go:
    name: Ensure immudb compiles with the oldest supported go version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ env.MIN_SUPPORTED_GO_VERSION }}
      - uses: actions/checkout@v3
      - run: make all

  gosec:
    runs-on: ubuntu-latest
    env:
      JOB_NAME: ${{ github.job }}
      JOB_ID: ${{ github.run_id }}
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - uses: actions/checkout@v3
      - run: |
          curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sudo sh -s -- -b $GOPATH/bin latest
          gosec -fmt=json -out=results-$JOB_ID.json -no-fail ./...

  binaries:
      name: Build binaries and notarize sources
      needs: [ gosec, old-go ]
      runs-on: ubuntu-latest
      env:
        JOB_NAME: ${{ github.job }}
        JOB_ID: ${{ github.run_id }}
      outputs:
        matrix: ${{ steps.list-binaries.outputs.matrix }}
      steps:
        - uses: actions/setup-go@v3
          with:
            go-version: ${{ env.GO_VERSION }}
        - uses: actions/checkout@v3
        - name: Build binaries
          run: make dist
        - name: Notarize git repository
          uses: docker://codenotary/cas
          with:
            args: n git://. --host cas.codenotary.com --api-key ${{ secrets.CAS_API_KEY }}
        - id: list-binaries
          run: |
            echo "::set-output name=matrix::$(ls dist | jq -R -s -c 'split("\n")[:-1] | {binary: .}')"
        - name: Upload binary artifacts
          uses: actions/upload-artifact@v3
          with:
            name: immudb-binaries
            path: dist
            retention-days: 5

  notarize-binaries:
      name: Notarize binaries
      needs: binaries
      runs-on: ubuntu-latest
      strategy:
        matrix: ${{fromJson(needs.binaries.outputs.matrix)}}
      env:
        JOB_NAME: ${{ github.job }}
        JOB_ID: ${{ github.run_id }}
      steps:
        - name: Download binary artifacts
          uses: actions/download-artifact@v3
          with:
            name: immudb-binaries
            path: dist
        - name: Notarize binaries
          uses: docker://codenotary/cas
          with:
            args: n dist/${{ matrix.binary }} --host cas.codenotary.com --api-key ${{ secrets.CAS_API_KEY }}

  images:
      name: Build and notarize Docker Images
      needs: [ gosec, old-go ]
      runs-on: ubuntu-latest
      env:
        JOB_NAME: ${{ github.job }}
        JOB_ID: ${{ github.run_id }}
        DOCKER_IMAGE_IMMUDB: "codenotary/immudb"
        DOCKER_IMAGE_IMMUADMIN: "codenotary/immuadmin"
        DOCKER_IMAGE_IMMUCLIENT: "codenotary/immuclient"
        DOCKER_BUILDKIT: "1"
        DEBIAN_VERSION: bullseye-slim
        ALMA_VERSION: almalinux-8-minimal
      steps:
        - uses: actions/checkout@v3
        - name: Build docker images
          shell: bash
          run: |
            if [[ "${GITHUB_REF}" =~ refs/tags/v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
              VERSION_TAG="${BASH_REMATCH[1]}.${BASH_REMATCH[2]}.${BASH_REMATCH[3]}"
              VERSION_TAG_SHORT="${BASH_REMATCH[1]}.${BASH_REMATCH[2]}"
            fi

            docker build --tag "${DOCKER_IMAGE_IMMUDB}:dev" --target scratch -f Dockerfile .
            docker build --tag "${DOCKER_IMAGE_IMMUDB}:dev-${DEBIAN_VERSION}" --target ${DEBIAN_VERSION} -f Dockerfile .
            docker build --tag "${DOCKER_IMAGE_IMMUDB}:dev-${ALMA_VERSION}" -f Dockerfile.alma .
            docker build --tag "${DOCKER_IMAGE_IMMUADMIN}:dev" -f Dockerfile.immuadmin .
            docker build --tag "${DOCKER_IMAGE_IMMUCLIENT}:dev" -f Dockerfile.immuclient .

            docker login -u "${{ secrets.REGISTRY_USER }}" -p "${{ secrets.REGISTRY_PASS }}"
            
            docker push "${DOCKER_IMAGE_IMMUDB}:dev"
            docker push "${DOCKER_IMAGE_IMMUDB}:dev-${DEBIAN_VERSION}"
            docker push "${DOCKER_IMAGE_IMMUDB}:dev-${ALMA_VERSION}"
            docker push "${DOCKER_IMAGE_IMMUADMIN}:dev"
            docker push "${DOCKER_IMAGE_IMMUCLIENT}:dev"

            if [[ ! -z "$VERSION_TAG" ]]; then
              for tag in "${VERSION_TAG}" "${VERSION_TAG_SHORT}" "latest"; do
                docker tag "${DOCKER_IMAGE_IMMUDB}:dev" "${DOCKER_IMAGE_IMMUDB}:${tag}"
                docker push "${DOCKER_IMAGE_IMMUDB}:${tag}"

                docker tag "${DOCKER_IMAGE_IMMUDB}:dev-${DEBIAN_VERSION}" "${DOCKER_IMAGE_IMMUDB}:${tag}-${DEBIAN_VERSION}"
                docker push "${DOCKER_IMAGE_IMMUDB}:${tag}-${DEBIAN_VERSION}"

                docker tag "${DOCKER_IMAGE_IMMUDB}:dev-${ALMA_VERSION}" "${DOCKER_IMAGE_IMMUDB}:${tag}-${ALMA_VERSION}"
                docker push "${DOCKER_IMAGE_IMMUDB}:${tag}-${ALMA_VERSION}"

                docker tag "${DOCKER_IMAGE_IMMUADMIN}:dev" "${DOCKER_IMAGE_IMMUADMIN}:${tag}"
                docker push "${DOCKER_IMAGE_IMMUADMIN}:${tag}"

                docker tag "${DOCKER_IMAGE_IMMUCLIENT}:dev" "${DOCKER_IMAGE_IMMUCLIENT}:${tag}"
                docker push "${DOCKER_IMAGE_IMMUCLIENT}:${tag}"
              done
            fi

            docker logout

        - name: Notarize docker image ${{ env.DOCKER_IMAGE_IMMUDB }}:dev
          uses: docker://codenotary/cas:bom-docker
          with:
            args: n docker://${{ env.DOCKER_IMAGE_IMMUDB }}:dev --host cas.codenotary.com --api-key ${{ secrets.CAS_API_KEY }}

        - name: Notarize docker image ${{ env.DOCKER_IMAGE_IMMUDB }}:dev-${{ env.DEBIAN_VERSION }}
          uses: docker://codenotary/cas:bom-docker
          with:
            args: n docker://${{ env.DOCKER_IMAGE_IMMUDB }}:dev-${{ env.DEBIAN_VERSION }} --host cas.codenotary.com --api-key ${{ secrets.CAS_API_KEY }}

        - name: Notarize docker image ${{ env.DOCKER_IMAGE_IMMUDB }}:dev-${{ env.ALMA_VERSION }}
          uses: docker://codenotary/cas:bom-docker
          with:
            args: n docker://${{ env.DOCKER_IMAGE_IMMUDB }}:dev-${{ env.ALMA_VERSION }} --host cas.codenotary.com --api-key ${{ secrets.CAS_API_KEY }}

        - name: Notarize docker image ${{ env.DOCKER_IMAGE_IMMUADMIN }}:dev
          uses: docker://codenotary/cas:bom-docker
          with:
            args: n docker://${{ env.DOCKER_IMAGE_IMMUADMIN }}:dev --host cas.codenotary.com --api-key ${{ secrets.CAS_API_KEY }}

        - name: Notarize docker image ${{ env.DOCKER_IMAGE_IMMUCLIENT }}:dev
          uses: docker://codenotary/cas:bom-docker
          with:
            args: n docker://${{ env.DOCKER_IMAGE_IMMUCLIENT }}:dev --host cas.codenotary.com --api-key ${{ secrets.CAS_API_KEY }}
            
  coveralls:
    name: Publish coverage
    needs: [ gosec, old-go ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - uses: actions/checkout@v3
      - run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          go get golang.org/x/tools/cmd/cover
          go get -u github.com/mattn/goveralls
          go get -u github.com/ory/go-acc
          set -o pipefail
          go-acc ./... --covermode=atomic --ignore test,immuclient,immuadmin,helper,cmdtest,sservice,version || true
          cat coverage.txt | grep -v "schema.pb" | grep -v "immuclient" | grep -v "immuadmin" | grep -v "helper" | grep -v "cmdtest" | grep -v "sservice" | grep -v "version" > coverage.out
          goveralls -coverprofile=coverage.out -service=gh-ci -repotoken ${{ secrets.COVERALLS_TOKEN }}
      - name: Analyze with SonarCloud
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
